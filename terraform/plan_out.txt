module.vpc.aws_vpc.this[0]: Refreshing state... [id=vpc-4438919b]
aws_lb_target_group.asg-tg-443: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:000000000000:targetgroup/asg-tg-443/37442abf]
module.vpc.aws_subnet.public[0]: Refreshing state... [id=subnet-8f020865]
aws_security_group.sg_alb: Refreshing state... [id=sg-ed14cfe7a4a4b4a73]
aws_lb.web_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:000000000000:loadbalancer/app/web-alb/136f0746]
aws_alb_listener.asg-443: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:000000000000:listener/app/web-alb/136f0746/443139756791737232]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_alb_listener.asg-443 will be created
  + resource "aws_alb_listener" "asg-443" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:000000000000:loadbalancer/app/web-alb/136f0746"
      + port              = 443
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:000000000000:targetgroup/asg-tg-443/37442abf"
          + type             = "forward"
        }
    }

  # aws_alb_listener.asg-80 will be created
  + resource "aws_alb_listener" "asg-80" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:000000000000:loadbalancer/app/web-alb/136f0746"
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_autoscaling_attachment.asg-attachment-443 will be created
  + resource "aws_autoscaling_attachment" "asg-attachment-443" {
      + alb_target_group_arn   = "arn:aws:elasticloadbalancing:us-east-1:000000000000:targetgroup/asg-tg-443/37442abf"
      + autoscaling_group_name = "web-asg"
      + id                     = (known after apply)
    }

  # aws_autoscaling_attachment.asg-attachment-80 will be created
  + resource "aws_autoscaling_attachment" "asg-attachment-80" {
      + alb_target_group_arn   = (known after apply)
      + autoscaling_group_name = "web-asg"
      + id                     = (known after apply)
    }

  # aws_autoscaling_group.web-asg will be created
  + resource "aws_autoscaling_group" "web-asg" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = (known after apply)
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + max_size                  = 5
      + metrics_granularity       = "1Minute"
      + min_size                  = 1
      + name                      = "web-asg"
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"
    }

  # aws_autoscaling_policy.web-asg-down will be created
  + resource "aws_autoscaling_policy" "web-asg-down" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "web-asg"
      + cooldown                = 300
      + enabled                 = true
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "web-asg-down"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = -1
    }

  # aws_autoscaling_policy.web-asg-up will be created
  + resource "aws_autoscaling_policy" "web-asg-up" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "web-asg"
      + cooldown                = 300
      + enabled                 = true
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "web-asg-up"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = 1
    }

  # aws_cloudwatch_metric_alarm.web-cpu-alarm-down will be created
  + resource "aws_cloudwatch_metric_alarm" "web-cpu-alarm-down" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "Monitoring metric for CPU utilization"
      + alarm_name                            = "web-cpu-down-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "LessThanOrEqualToThreshold"
      + dimensions                            = {
          + "autoscaling_group_name" = "web-asg"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 120
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "missing"
    }

  # aws_cloudwatch_metric_alarm.web-cpu-alarm-up will be created
  + resource "aws_cloudwatch_metric_alarm" "web-cpu-alarm-up" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "Monitoring metric for CPU utilization"
      + alarm_name                            = "web-cpu-up-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanOrEqualToThreshold"
      + dimensions                            = {
          + "autoscaling_group_name" = "web-asg"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 120
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 60
      + treat_missing_data                    = "missing"
    }

  # aws_launch_configuration.asg-lc will be created
  + resource "aws_launch_configuration" "asg-lc" {
      + arn                         = (known after apply)
      + associate_public_ip_address = (known after apply)
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-785db401"
      + instance_type               = "t2.small"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + name_prefix                 = "WP-webapp"
      + security_groups             = (known after apply)
      + user_data                   = "5722471ee3cb78c8e017e48eb8bb72be2554e4e4"

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lb_target_group.asg-tg-80 will be created
  + resource "aws_lb_target_group" "asg-tg-80" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "asg-tg-80"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = "vpc-4438919b"

      + health_check {
          + enabled             = (known after apply)
          + healthy_threshold   = (known after apply)
          + interval            = (known after apply)
          + matcher             = (known after apply)
          + path                = (known after apply)
          + port                = (known after apply)
          + protocol            = (known after apply)
          + timeout             = (known after apply)
          + unhealthy_threshold = (known after apply)
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }

      + target_failover {
          + on_deregistration = (known after apply)
          + on_unhealthy      = (known after apply)
        }
    }

  # aws_route53_record.cname_route53_record will be created
  + resource "aws_route53_record" "cname_route53_record" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "www.webapp.com"
      + records         = [
          + "www.webapp.com",
        ]
      + ttl             = 60
      + type            = "CNAME"
      + zone_id         = (known after apply)
    }

  # aws_route53_zone.zoneA will be created
  + resource "aws_route53_zone" "zoneA" {
      + arn                 = (known after apply)
      + comment             = "Managed by Terraform"
      + force_destroy       = false
      + id                  = (known after apply)
      + name                = "www.webapp.com"
      + name_servers        = (known after apply)
      + primary_name_server = (known after apply)
      + tags_all            = (known after apply)
      + zone_id             = (known after apply)
    }

  # aws_security_group.sg_asg will be created
  + resource "aws_security_group" "sg_asg" {
      + arn                    = (known after apply)
      + description            = "Allow connection from the ALB to the ASG"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-ed14cfe7a4a4b4a73",
                ]
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = [
                  + "sg-ed14cfe7a4a4b4a73",
                ]
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "lb-to-asg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-4438919b"
    }

  # module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1a"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1a"
          + "Terraform"   = "true"
        }
      + vpc                  = true
    }

  # module.vpc.aws_eip.nat[1] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1b"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1b"
          + "Terraform"   = "true"
        }
      + vpc                  = true
    }

  # module.vpc.aws_eip.nat[2] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1c"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1c"
          + "Terraform"   = "true"
        }
      + vpc                  = true
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "test"
          + "Name"        = "my-vpc"
          + "Terraform"   = "true"
        }
      + tags_all = {
          + "Environment" = "test"
          + "Name"        = "my-vpc"
          + "Terraform"   = "true"
        }
      + vpc_id   = "vpc-4438919b"
    }

  # module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = "subnet-8f020865"
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1a"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1a"
          + "Terraform"   = "true"
        }
    }

  # module.vpc.aws_nat_gateway.this[1] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = "subnet-8f020865"
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1b"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1b"
          + "Terraform"   = "true"
        }
    }

  # module.vpc.aws_nat_gateway.this[2] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = "subnet-8f020865"
      + tags                 = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1c"
          + "Terraform"   = "true"
        }
      + tags_all             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-eu-west-1c"
          + "Terraform"   = "true"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[1] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[2] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1a"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1a"
          + "Terraform"   = "true"
        }
      + vpc_id           = "vpc-4438919b"
    }

  # module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1b"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1b"
          + "Terraform"   = "true"
        }
      + vpc_id           = "vpc-4438919b"
    }

  # module.vpc.aws_route_table.private[2] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1c"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1c"
          + "Terraform"   = "true"
        }
      + vpc_id           = "vpc-4438919b"
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-public"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-public"
          + "Terraform"   = "true"
        }
      + vpc_id           = "vpc-4438919b"
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[2] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-8f020865"
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1a"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1a"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = "vpc-4438919b"
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1b"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1b"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = "vpc-4438919b"
    }

  # module.vpc.aws_subnet.private[2] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1c"
          + "Terraform"   = "true"
        }
      + tags_all                                       = {
          + "Environment" = "test"
          + "Name"        = "my-vpc-private-eu-west-1c"
          + "Terraform"   = "true"
        }
      + vpc_id                                         = "vpc-4438919b"
    }

Plan: 36 to add, 0 to change, 0 to destroy.

Warning: Argument is deprecated

  with aws_autoscaling_attachment.asg-attachment-443,
  on target_group.tf line 24, in resource "aws_autoscaling_attachment" "asg-attachment-443":
  24:   alb_target_group_arn   = aws_lb_target_group.asg-tg-443.arn

Use lb_target_group_arn instead

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
